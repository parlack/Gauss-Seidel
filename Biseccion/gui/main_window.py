import customtkinter as ctk
import tkinter as tk
from tkinter import messagebox
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import numpy as np

from .components import (
    ModernButton, ModernEntry, FunctionInputPanel,
    IntervalInputPanel, BiseccionVisualizationPanel
)
from solver.biseccion import BiseccionSolver
from utils.validators import FunctionValidator


class BiseccionApp(ctk.CTk):
    """
    Aplicaci√≥n principal para resolver ecuaciones no lineales con bisecci√≥n
    
    Interfaz gr√°fica principal que integra todos los componentes
    para resolver ecuaciones no lineales usando el m√©todo num√©rico
    de bisecci√≥n con visualizaci√≥n paso a paso
    """

    def __init__(self):
        super().__init__()

        # Configuraci√≥n de la ventana principal
        self.title("Resolver Ecuaciones No Lineales - M√©todo de Bisecci√≥n")
        self.geometry("1400x900")
        self.minsize(1200, 700)

        # Variables de estado de la aplicaci√≥n
        self.solver = BiseccionSolver()  # instancia del solver
        
        # Configurar tema visual
        ctk.set_appearance_mode("light")
        ctk.set_default_color_theme("blue")

        # Configurar interfaz de usuario
        self.setup_ui()
        # Centrar ventana en pantalla
        self.center_window()

    def setup_ui(self):
        """Configura la interfaz de usuario principal"""
        
        # Frame principal que contiene todo
        main_frame = ctk.CTkFrame(self, corner_radius=0)
        main_frame.pack(fill="both", expand=True)

        # Crear header con t√≠tulo e informaci√≥n
        self.create_header(main_frame)

        # Frame de contenido principal
        content_frame = ctk.CTkFrame(main_frame)
        content_frame.pack(fill="both", expand=True, padx=20, pady=10)

        # Crear notebook principal con pesta√±as
        self.main_notebook = ctk.CTkTabview(content_frame)
        self.main_notebook.pack(fill="both", expand=True, padx=10, pady=10)

        # Configurar pesta√±as principales
        self.setup_input_tab()
        self.setup_solution_tab()

    def create_header(self, parent):
        """Crea el header de la aplicaci√≥n con t√≠tulo e informaci√≥n"""
        header_frame = ctk.CTkFrame(parent, height=100, corner_radius=0)
        header_frame.pack(fill="x", padx=0, pady=0)
        header_frame.pack_propagate(False)

        # T√≠tulo principal de la aplicaci√≥n
        title_label = ctk.CTkLabel(
            header_frame,
            text="Resolver Ecuaciones No Lineales",
            font=ctk.CTkFont(size=28, weight="bold"),
            text_color=("gray10", "gray90")
        )
        title_label.pack(side="left", padx=30, pady=25)

        # Subt√≠tulo explicativo
        subtitle_label = ctk.CTkLabel(
            header_frame,
            text="M√©todo num√©rico de bisecci√≥n con visualizaci√≥n paso a paso",
            font=ctk.CTkFont(size=14),
            text_color=("gray50", "gray50")
        )
        subtitle_label.pack(side="left", padx=(0, 30), pady=(45, 5))

        # Informaci√≥n del m√©todo
        info_frame = ctk.CTkFrame(header_frame)
        info_frame.pack(side="right", padx=30, pady=20)

        # Etiqueta que muestra informaci√≥n del m√©todo
        method_info_label = ctk.CTkLabel(
            info_frame,
            text="M√©todo: Bisecci√≥n",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        method_info_label.pack(padx=15, pady=10)

    def setup_input_tab(self):
        """Configura la pesta√±a de entrada de datos"""
        input_tab = self.main_notebook.add("Entrada de Datos")

        # Frame de controles superiores
        controls_frame = ctk.CTkFrame(input_tab)
        controls_frame.pack(fill="x", padx=10, pady=10)

        # Botones de control
        buttons_frame = ctk.CTkFrame(controls_frame)
        buttons_frame.pack(side="left", padx=10, pady=10)

        # Bot√≥n para limpiar todo
        ModernButton(
            buttons_frame,
            text="üóë Limpiar Todo",
            command=self.clear_all_inputs,
            fg_color="gray50",
            width=130
        ).pack(side="left", padx=5, pady=5)

        # Bot√≥n para cargar ejemplo
        ModernButton(
            buttons_frame,
            text="üìã Ejemplo",
            command=self.load_example,
            fg_color="orange",
            width=130
        ).pack(side="left", padx=5, pady=5)

        # Bot√≥n para validar entrada
        ModernButton(
            buttons_frame,
            text="‚úÖ Validar",
            command=self.validate_input,
            fg_color="green",
            width=130
        ).pack(side="left", padx=5, pady=5)

        # BOT√ìN PRINCIPAL DE RESOLVER - Movido aqu√≠ para mejor visibilidad
        self.solve_button = ModernButton(
            buttons_frame,
            text="üöÄ Resolver Ecuaci√≥n",
            command=self.solve_equation,
            height=45,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#1f538d",
            width=180
        )
        self.solve_button.pack(side="left", padx=10, pady=5)

        # Configuraci√≥n del solver
        config_frame = ctk.CTkFrame(controls_frame)
        config_frame.pack(side="right", padx=10, pady=10)

        # Frame para tolerancia
        tol_frame = ctk.CTkFrame(config_frame)
        tol_frame.pack(side="left", padx=5, pady=5)

        ctk.CTkLabel(
            tol_frame,
            text="Tolerancia:",
            font=ctk.CTkFont(size=12, weight="bold")
        ).pack(side="left", padx=(8, 2), pady=5)

        self.tolerance_var = tk.StringVar(value="0.000001")
        self.tolerance_entry = ModernEntry(
            tol_frame,
            textvariable=self.tolerance_var,
            width=100,
            placeholder="0.000001"
        )
        self.tolerance_entry.pack(side="left", padx=(2, 8), pady=5)

        # Frame para m√°ximo de iteraciones
        max_iter_frame = ctk.CTkFrame(config_frame)
        max_iter_frame.pack(side="left", padx=5, pady=5)

        ctk.CTkLabel(
            max_iter_frame,
            text="Max. Iter:",
            font=ctk.CTkFont(size=12, weight="bold")
        ).pack(side="left", padx=(8, 2), pady=5)

        self.max_iter_var = tk.StringVar(value="100")
        self.max_iter_entry = ModernEntry(
            max_iter_frame,
            textvariable=self.max_iter_var,
            width=80,
            placeholder="100"
        )
        self.max_iter_entry.pack(side="left", padx=(2, 8), pady=5)

        # Frame principal scrollable para funci√≥n e intervalo
        input_main_scroll = ctk.CTkScrollableFrame(input_tab)
        input_main_scroll.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Frame contenedor dentro del scroll
        input_main_frame = ctk.CTkFrame(input_main_scroll)
        input_main_frame.pack(fill="both", expand=True, padx=5, pady=5)

        # Frame izquierdo para la funci√≥n
        left_frame = ctk.CTkFrame(input_main_frame)
        left_frame.pack(side="left", fill="both", expand=True, padx=(10, 5), pady=10)

        # Widget para ingresar funci√≥n matem√°tica
        self.function_input = FunctionInputPanel(
            left_frame,
            on_change=self.on_input_change
        )
        self.function_input.pack(fill="both", expand=True)

        # Frame derecho para intervalo y gr√°fica
        right_frame = ctk.CTkFrame(input_main_frame)
        right_frame.pack(side="right", fill="both", expand=True, padx=(5, 10), pady=10)

        # Contenedor superior: intervalo
        interval_container = ctk.CTkFrame(right_frame)
        interval_container.pack(fill="x", padx=10, pady=10)

        # Widget para ingresar intervalo
        self.interval_input = IntervalInputPanel(
            interval_container,
            on_change=self.on_input_change
        )
        self.interval_input.pack(fill="both", expand=True)

        # Frame para vista previa (tama√±o fijo para no ocultar otros elementos)
        graph_frame = ctk.CTkFrame(right_frame, height=120)
        graph_frame.pack(fill="x", padx=10, pady=(10, 10))
        graph_frame.pack_propagate(False)  # Mantener altura fija

        graph_title = ctk.CTkLabel(
            graph_frame,
            text="üìà Vista Previa de la Funci√≥n",
            font=ctk.CTkFont(size=12, weight="bold")
        )
        graph_title.pack(pady=(8, 5))

        # Placeholder para gr√°fica
        self.graph_placeholder = ctk.CTkLabel(
            graph_frame,
            text="La gr√°fica aparecer√° aqu√≠ cuando\ningreses una funci√≥n v√°lida",
            font=ctk.CTkFont(size=10),
            text_color="gray60"
        )
        self.graph_placeholder.pack(pady=(0, 8))

        # Barra de estado
        self.status_label = ctk.CTkLabel(
            input_tab,
            text="Introduce una funci√≥n matem√°tica y el intervalo de b√∫squeda",
            font=ctk.CTkFont(size=12),
            text_color="gray60"
        )
        self.status_label.pack(side="bottom", pady=5)

    def setup_solution_tab(self):
        """Configura la pesta√±a de soluci√≥n"""
        solution_tab = self.main_notebook.add("Proceso de Soluci√≥n")

        # Panel principal de visualizaci√≥n del proceso
        self.visualization_panel = BiseccionVisualizationPanel(solution_tab)
        self.visualization_panel.pack(fill="both", expand=True, padx=10, pady=10)

    def center_window(self):
        """Centra la ventana en la pantalla"""
        # Actualizar geometr√≠a para obtener tama√±o real
        self.update_idletasks()
        # Obtener dimensiones de la ventana
        width = self.winfo_width()
        height = self.winfo_height()
        # Calcular posici√≥n central
        x = (self.winfo_screenwidth() // 2) - (width // 2)
        y = (self.winfo_screenheight() // 2) - (height // 2)
        # Aplicar geometr√≠a centrada
        self.geometry(f'{width}x{height}+{x}+{y}')

    def on_input_change(self):
        """Callback cuando cambian los datos de entrada"""
        # Actualizar vista previa si es posible
        self.update_function_preview()

    def update_function_preview(self):
        """Actualiza la vista previa de la funci√≥n"""
        try:
            func_str = self.function_input.get_function()
            if not func_str:
                return

            # Validar funci√≥n
            is_valid, _ = FunctionValidator.validate_function_syntax(func_str)
            if not is_valid:
                return

            # Obtener intervalo si est√° disponible
            a, b = self.interval_input.get_interval()
            if a is None or b is None:
                a, b = -5, 5  # intervalo por defecto

            # Crear gr√°fica simple (esto se podr√≠a mejorar con matplotlib)
            self.graph_placeholder.configure(
                text=f"Funci√≥n: f(x) = {func_str}\nIntervalo: [{a}, {b}]"
            )

        except Exception:
            # Si hay error, no actualizar
            pass

    def clear_all_inputs(self):
        """Limpia todas las entradas de la interfaz"""
        # Limpiar funci√≥n
        self.function_input.clear()
        # Limpiar intervalo
        self.interval_input.clear()
        # Limpiar panel de visualizaci√≥n
        self.visualization_panel.clear()
        # Actualizar mensaje de estado
        self.update_status("Todas las entradas han sido limpiadas")
        # Resetear vista previa
        self.graph_placeholder.configure(
            text="La gr√°fica aparecer√° aqu√≠ cuando\ningreses una funci√≥n v√°lida"
        )

    def load_example(self):
        """Carga un ejemplo predefinido"""
        # Obtener ejemplos disponibles
        examples = FunctionValidator.get_function_examples()
        
        # Mostrar dialog para seleccionar ejemplo
        example_names = [f"{func} ({desc})" for func, desc, _ in examples]
        
        # Usar messagebox simple para selecci√≥n (se podr√≠a mejorar con un dialog personalizado)
        choice = messagebox.askyesno(
            "Cargar Ejemplo",
            "¬øQuieres cargar un ejemplo de funci√≥n cuadr√°tica?\n\n"
            "Funci√≥n: x**2 - 4\n"
            "Intervalo: [1, 3]\n"
            "Ra√≠ces esperadas en x = ¬±2"
        )
        
        if choice:
            # Cargar ejemplo de funci√≥n cuadr√°tica
            self.function_input.set_function("x**2 - 4")
            self.interval_input.set_interval(1, 3)
            self.update_status("Ejemplo cargado: funci√≥n cuadr√°tica con ra√≠z en x = 2")
            self.update_function_preview()

    def validate_input(self):
        """Valida la entrada actual del usuario"""
        try:
            # Obtener funci√≥n del usuario
            func_str = self.function_input.get_function()
            if not func_str:
                self.update_status("Error: La funci√≥n no puede estar vac√≠a", is_error=True)
                messagebox.showerror("Error de validaci√≥n", "Debes ingresar una funci√≥n matem√°tica")
                return False

            # Validar sintaxis de la funci√≥n
            is_valid, message = FunctionValidator.validate_function_syntax(func_str)
            if not is_valid:
                self.update_status(f"Error en funci√≥n: {message}", is_error=True)
                messagebox.showerror("Error de validaci√≥n", f"Funci√≥n inv√°lida: {message}")
                return False

            # Obtener intervalo
            a, b = self.interval_input.get_interval()
            if a is None or b is None:
                self.update_status("Error: Debes ingresar un intervalo v√°lido", is_error=True)
                messagebox.showerror("Error de validaci√≥n", "Debes ingresar valores num√©ricos para el intervalo")
                return False

            # Validar intervalo para bisecci√≥n
            is_valid, message, fa, fb = FunctionValidator.validate_bisection_interval(func_str, a, b)
            if not is_valid:
                self.update_status("Error en intervalo: No hay cambio de signo", is_error=True)
                messagebox.showerror("Error de validaci√≥n", message)
                
                # Sugerir intervalos alternativos
                suggestions = FunctionValidator.suggest_interval_for_function(func_str)
                if suggestions:
                    suggestion_text = "Intervalos sugeridos donde f(x) cambia de signo:\n\n"
                    for i, (sugg_a, sugg_b) in enumerate(suggestions[:3], 1):
                        suggestion_text += f"{i}. [{sugg_a:.3f}, {sugg_b:.3f}]\n"
                    
                    use_suggestion = messagebox.askyesno(
                        "Sugerencias de Intervalos",
                        f"{suggestion_text}\n¬øQuieres usar la primera sugerencia?"
                    )
                    
                    if use_suggestion and suggestions:
                        sugg_a, sugg_b = suggestions[0]
                        self.interval_input.set_interval(sugg_a, sugg_b)
                        self.update_status(f"Usando intervalo sugerido: [{sugg_a:.3f}, {sugg_b:.3f}]")
                        return True
                
                return False

            # Todo v√°lido
            self.update_status(f"Validaci√≥n exitosa. f({a}) = {fa:.6f}, f({b}) = {fb:.6f}")
            return True

        except Exception as e:
            error_msg = f"Error inesperado: {str(e)}"
            self.update_status(error_msg, is_error=True)
            messagebox.showerror("Error", error_msg)
            return False

    def solve_equation(self):
        """Resuelve la ecuaci√≥n usando bisecci√≥n"""
        # Validar entrada primero
        if not self.validate_input():
            return

        try:
            # Obtener funci√≥n e intervalo
            func_str = self.function_input.get_function()
            a, b = self.interval_input.get_interval()

            # Configurar par√°metros del solver
            try:
                self.solver.tolerance = float(self.tolerance_var.get())
                self.solver.max_iterations = int(self.max_iter_var.get())
            except ValueError:
                messagebox.showerror("Error", "Valores de configuraci√≥n inv√°lidos")
                return

            # Iniciar proceso de resoluci√≥n
            self.update_status("Resolviendo ecuaci√≥n...")
            self.solve_button.configure(text="Resolviendo...", state="disabled")
            self.update_idletasks()

            # Generar pasos detallados del proceso
            steps_data = self.solver.generate_step_by_step(func_str, a, b)

            # Verificar si hubo errores en el proceso
            if steps_data and steps_data[0].get('type') == 'error':
                error_msg = steps_data[0]['content']
                self.update_status(f"Error: {error_msg}", is_error=True)
                messagebox.showerror("Error de resoluci√≥n", error_msg)
                return

            # Actualizar panel de visualizaci√≥n con los resultados
            self.visualization_panel.update_visualization(steps_data)

            # Cambiar a la pesta√±a de soluci√≥n para mostrar resultados
            self.main_notebook.set("Proceso de Soluci√≥n")

            # Actualizar status basado en el resultado
            result = steps_data[-1]  # √∫ltimo paso contiene el resultado final
            if result.get('converged', False):
                root = result.get('root', 0)
                iterations = result.get('iterations', 0)
                self.update_status(f"¬°Ra√≠z encontrada! x = {root:.8f} en {iterations} iteraciones")
            else:
                self.update_status("M√°ximo de iteraciones alcanzado - Soluci√≥n aproximada obtenida", is_warning=True)

        except Exception as e:
            error_msg = f"Error al resolver: {str(e)}"
            self.update_status(error_msg, is_error=True)
            messagebox.showerror("Error de resoluci√≥n", error_msg)

        finally:
            # Restaurar estado del bot√≥n principal
            self.solve_button.configure(text="üöÄ Resolver Ecuaci√≥n", state="normal")

    def update_status(self, message: str, is_error: bool = False, is_warning: bool = False):
        """Actualiza el mensaje de estado en la barra inferior"""
        # Determinar color seg√∫n tipo de mensaje
        if is_error:
            color = "red"
        elif is_warning:
            color = "orange"  
        else:
            color = ("gray60", "gray40")

        # Actualizar texto y color del label de status
        self.status_label.configure(text=message, text_color=color)
        # Forzar actualizaci√≥n inmediata de la interfaz
        self.update_idletasks()
