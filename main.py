#!/usr/bin/env python3
"""
Aplicaci√≥n para resolver sistemas de ecuaciones lineales usando el m√©todo de Gauss-Seidel
con interfaz gr√°fica moderna y visualizaci√≥n paso a paso.

Autor: AI Assistant
Fecha: 2024
"""

import sys
import os
import tkinter as tk
from tkinter import messagebox

def check_dependencies():
    """Verifica que todas las dependencias est√©n instaladas"""
    missing_deps = []
    
    try:
        import customtkinter
    except ImportError:
        missing_deps.append("customtkinter")
    
    try:
        import numpy
    except ImportError:
        missing_deps.append("numpy")
    
    try:
        import matplotlib
    except ImportError:
        missing_deps.append("matplotlib")
    
    if missing_deps:
        deps_str = ", ".join(missing_deps)
        error_msg = f"Faltan dependencias: {deps_str}\n\n"
        error_msg += "Por favor, instala las dependencias ejecutando:\n"
        error_msg += "pip install -r requirements.txt"
        
        # Mostrar error usando tkinter b√°sico si customtkinter no est√° disponible
        root = tk.Tk()
        root.withdraw()
        messagebox.showerror("Dependencias Faltantes", error_msg)
        root.destroy()
        return False
    
    return True

def main():
    """Funci√≥n principal de la aplicaci√≥n"""
    # Verificar dependencias
    if not check_dependencies():
        sys.exit(1)
    
    try:
        # Importar despu√©s de verificar dependencias
        from gui.main_window import GaussSeidelApp
        
        # Crear y ejecutar la aplicaci√≥n
        app = GaussSeidelApp()
        
        # Configurar el protocolo de cierre
        def on_closing():
            """Maneja el cierre de la aplicaci√≥n"""
            if messagebox.askokcancel("Salir", "¬øEst√°s seguro de que quieres salir?"):
                app.quit()
                app.destroy()
                sys.exit(0)
        
        app.protocol("WM_DELETE_WINDOW", on_closing)
        
        # Mostrar mensaje de bienvenida
        print("="*60)
        print("üî¢ RESOLVER SISTEMAS DE ECUACIONES - GAUSS-SEIDEL")
        print("="*60)
        print("‚ú® Interfaz gr√°fica moderna cargada exitosamente")
        print("üìä Visualizaci√≥n paso a paso habilitada")
        print("üöÄ ¬°La aplicaci√≥n est√° lista para usar!")
        print("="*60)
        print()
        print("üí° Consejos de uso:")
        print("   ‚Ä¢ Para mejor convergencia, usa matrices diagonalmente dominantes")
        print("   ‚Ä¢ Ajusta la tolerancia seg√∫n la precisi√≥n requerida")
        print("   ‚Ä¢ Usa el bot√≥n 'Ejemplo' para cargar sistemas de prueba")
        print("   ‚Ä¢ Navega entre iteraciones en la pesta√±a 'Proceso de Soluci√≥n'")
        print()
        
        # Iniciar la aplicaci√≥n
        app.mainloop()
        
    except ImportError as e:
        error_msg = f"Error al importar m√≥dulos: {str(e)}\n"
        error_msg += "Verifica que todos los archivos est√©n en sus carpetas correctas."
        print(f"‚ùå {error_msg}")
        
        # Mostrar tambi√©n en GUI si es posible
        try:
            root = tk.Tk()
            root.withdraw()
            messagebox.showerror("Error de Importaci√≥n", error_msg)
            root.destroy()
        except:
            pass
        
        sys.exit(1)
    
    except Exception as e:
        error_msg = f"Error inesperado: {str(e)}"
        print(f"‚ùå {error_msg}")
        
        try:
            root = tk.Tk()
            root.withdraw()
            messagebox.showerror("Error", error_msg)
            root.destroy()
        except:
            pass
        
        sys.exit(1)

if __name__ == "__main__":
    main()

