#!/usr/bin/env python3
"""
Script para probar sistemas de ecuaciones grandes y la responsividad 
de la nueva interfaz mejorada de Gauss-Seidel
"""

import numpy as np
import customtkinter as ctk
from gui.main_window import GaussSeidelApp
import tkinter.messagebox as messagebox

def create_diagonally_dominant_system(n):
    """Crea un sistema diagonalmente dominante de tama√±o n√ón"""
    # Crear matriz con elementos aleatorios
    A = np.random.rand(n, n) * 2 - 1  # Valores entre -1 y 1
    
    # Hacer la matriz diagonalmente dominante
    for i in range(n):
        row_sum = np.sum(np.abs(A[i, :])) - np.abs(A[i, i])
        A[i, i] = row_sum + 1 + np.random.rand()  # Asegurar dominancia diagonal
    
    # Crear soluci√≥n conocida
    x_true = np.random.rand(n) * 10 - 5  # Soluci√≥n entre -5 y 5
    
    # Calcular vector b
    b = A.dot(x_true)
    
    return A, b, x_true

def load_test_system(app, size):
    """Carga un sistema de prueba en la aplicaci√≥n"""
    A, b, x_true = create_diagonally_dominant_system(size)
    
    # Cambiar el tama√±o del sistema en la app
    app.size_var.set(str(size))
    app.on_size_change(str(size))
    
    # Cargar la matriz
    app.matrix_input.set_values(A.tolist())
    
    # Cargar el vector
    app.vector_input.set_values(b.tolist())
    
    return x_true

class TestLargeSystemsApp(GaussSeidelApp):
    """Versi√≥n extendida de la app para pruebas de sistemas grandes"""
    
    def __init__(self):
        super().__init__()
        self.title("üß™ Prueba de Sistemas Grandes - Gauss-Seidel")
        self.add_test_menu()
    
    def add_test_menu(self):
        """Agrega men√∫ de pruebas para sistemas grandes"""
        # Frame de pruebas en la parte superior
        test_frame = ctk.CTkFrame(self)
        test_frame.pack(fill="x", padx=20, pady=(10, 0))
        
        test_title = ctk.CTkLabel(
            test_frame,
            text="üß™ Pruebas de Responsividad - Sistemas Grandes",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=("#d32f2f", "#f44336")
        )
        test_title.pack(side="left", padx=20, pady=15)
        
        # Botones de prueba
        buttons_frame = ctk.CTkFrame(test_frame)
        buttons_frame.pack(side="right", padx=20, pady=10)
        
        test_sizes = [3, 5, 7, 8, 10]
        for size in test_sizes:
            btn = ctk.CTkButton(
                buttons_frame,
                text=f"Probar {size}√ó{size}",
                command=lambda s=size: self.test_system_size(s),
                width=80,
                height=30,
                font=ctk.CTkFont(size=11)
            )
            btn.pack(side="left", padx=3, pady=5)
    
    def test_system_size(self, size):
        """Prueba un sistema de tama√±o espec√≠fico"""
        try:
            # Cargar sistema de prueba
            x_true = load_test_system(self, size)
            
            # Mostrar mensaje informativo
            message = f"""
üß™ Sistema de Prueba {size}√ó{size} Cargado

‚úÖ Matriz diagonalmente dominante generada autom√°ticamente
üéØ Soluci√≥n conocida: {x_true[:3].round(3)}{"..." if size > 3 else ""}
üìè Layout optimizado: {'Maximizado autom√°ticamente' if size >= 7 else 'Redimensionado' if size >= 5 else 'Tama√±o normal'}

üí° Caracter√≠sticas probadas:
   ‚Ä¢ Campos responsivos: {self.get_field_info(size)}
   ‚Ä¢ Scroll inteligente: {'‚úÖ Activado' if size > 4 else '‚ùå No necesario'}
   ‚Ä¢ Layout de 2 columnas: ‚úÖ T√©rminos independientes + Configuraci√≥n

üöÄ Presiona "RESOLVER SISTEMA" para probar la visualizaci√≥n paso a paso
            """
            
            messagebox.showinfo(f"Sistema {size}√ó{size} Cargado", message)
            
            # Forzar actualizaci√≥n de status
            self.update_status(f"üß™ Sistema de prueba {size}√ó{size} cargado exitosamente")
            
        except Exception as e:
            messagebox.showerror("Error", f"Error al cargar sistema de prueba: {str(e)}")
    
    def get_field_info(self, size):
        """Obtiene informaci√≥n sobre los campos seg√∫n el tama√±o"""
        if size <= 3:
            return "85px/130px, fuente 12pt"
        elif size <= 5:
            return "70px/120px, fuente 11pt"
        elif size <= 7:
            return "58px/110px, fuente 10pt"
        else:
            return "48px/100px, fuente 9pt"

def main():
    """Ejecuta la aplicaci√≥n de pruebas"""
    print("üß™ PRUEBA DE SISTEMAS GRANDES - GAUSS-SEIDEL")
    print("=" * 60)
    print()
    print("üéØ Esta aplicaci√≥n te permite probar la responsividad")
    print("   de la interfaz con diferentes tama√±os de sistemas.")
    print()
    print("üìä Caracter√≠sticas a probar:")
    print("   ‚Ä¢ Layout de 2 columnas (T√©rminos independientes + Configuraci√≥n)")
    print("   ‚Ä¢ Auto-redimensionado de ventana")
    print("   ‚Ä¢ Campos responsivos")
    print("   ‚Ä¢ Scroll inteligente")
    print("   ‚Ä¢ Visualizaci√≥n optimizada")
    print()
    print("üß™ Botones de prueba disponibles:")
    print("   ‚Ä¢ 3√ó3: Layout normal, campos amplios")
    print("   ‚Ä¢ 5√ó5: Ventana agrandada, campos medianos")  
    print("   ‚Ä¢ 7√ó7: Auto-maximizaci√≥n, scroll en matriz")
    print("   ‚Ä¢ 8√ó8: Scroll completo, campos compactos")
    print("   ‚Ä¢ 10√ó10: Ultra-compacto, todos los scrolls activos")
    print()
    print("üöÄ ¬°Iniciando aplicaci√≥n de pruebas!")
    print("=" * 60)
    
    try:
        app = TestLargeSystemsApp()
        app.mainloop()
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")

if __name__ == "__main__":
    main()
